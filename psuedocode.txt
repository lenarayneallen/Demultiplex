def ReverseComplement(seq: str) -> str:
	```Takes a sequence and returns the reverse complement of that sequence```
	return reverse complement of seq
	Input: ACTG
	Expected output: CAGT

def QS_Thresh(qual_score_string: str, cutoff: int) -> bool:
	```Given a string of quality scores, Calculates the average(?) quality score of a sequence 
       and returns True if above cutoff and False if below cutoff```
    return True or False
	Input: #AAAAJJF, 70
    Expected Output: True

def Append_indexes(header: str, index1: str, index2: str) -> str
    ```Provided a header line (as a string) and two index sequences 
    (also as strings) append index sequences to header line in the following
    format: header index1-index2```
    return updated header with appended indexes
    Input: @K00337:83:HJKJNBBXX:8:1101:1286:1191 4:N:0:1, TACGCTAC, GTAGCGTA
    Expected Output: @K00337:83:HJKJNBBXX:8:1101:1286:1191 TACGCTAC-GTAGCGTA


OPEN all four FASTQ files (R1.fastq, R2.fastq, R3.fastq, R4.fastq) and Index File:
	OPEN output files for writing (hopped_R1.fastq, hopped_R2.fastq, 
	unknown_R1.fastq, unknown_R2.fastq, {index}_R1.fastq, {index}_R2.fastq)

    hopped_count = 0
    matched_count = 0
    unknown_count = 0

    For ind in index file:
        ADD to new list called indexes_list:
            for index in indexes_list:
            For record in R2.fastq, R3.fastq, R1.fastq, R4.fastq:
                EXTRACT sequence lines as seq_line_2 and seq_line_3
                    barcode_2 == seq_line_2
                    if barcode_2 == index:

                        barcode_3 == ReverseComplement(seq_line_3)
                        EXTRACT header lines from current R1.fastq and R4.fastq records as header_1 and header_2
                        
                        header_1 = Append_indexes(header_1,barcode_2, barcode_3)
                        header_2 = Append_indexes(header_2,barcode_2, barcode_3)
                        
                        if "N" in barcode_2 or barcode_3:
                            WRITE header_1 to unknown_R1.fastq
                            WRITE next three lines of R1.fastq to unknown_R1.fastq
                            WRITE header_2 to unknown_R2.fastq
                            WRITE next three lines of R4.fastq to unknown_R2.fastq
                            unknown_count += 1
                        elif barcode_2 or barcode_3 not in indexes_list:
                            WRITE header_1 to unknown_R1.fastq
                            WRITE next three lines of R1.fastq to unknown_R1.fastq
                            WRITE header_2 to unknown_R2.fastq
                            WRITE next three lines of R4.fastq to unknown_R2.fastq
                            unknown_count += 1
                        elif QS_Thresh(barcode_2) or QS_Thresh(barcode_3) == False:
                            WRITE header_1 to unknown_R1.fastq
                            WRITE next three lines of R1.fastq to unknown_R1.fastq
                            WRITE header_2 to unknown_R2.fastq
                            WRITE next three lines of R4.fastq to unknown_R2.fastq
                            unknown_count += 1
                        
                        elif barcode_2 == barcode_3:
                            WRITE header_1 to {index}_R1.fastq
                            WRITE next three lines of R1.fastq to {index}_R1.fastq
                            WRITE header_2 to {index}_R2.fastq
                            WRITE next three lines of R4.fastq to {index}_R2.fastq
                            matched_count += 1
                        else:
                            WRITE header_1 to hopped_R1.fastq
                            WRITE next three lines of R1.fastq to hopped_R1.fastq
                            WRITE header_2 to {index}_R2.fastq
                            WRITE next three lines of R4.fastq to hopped_R1.fastq
                            hopped_count += 1
    
    print(hopped_count, matched_count, unknown_count)
